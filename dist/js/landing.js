/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/common/common.ts":
/*!******************************!*\
  !*** ./src/common/common.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   products: () => (/* binding */ products)\n/* harmony export */ });\n/* harmony import */ var _composite_modules_header_header_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../composite_modules/header/header.js */ \"./src/composite_modules/header/header.ts\");\n/************************* Файл с общими данными ************************/\n\n// Данные пользователя\nlet userData = {\n    logged: true,\n    name: 'Юлий Цезарь',\n};\n// Массив с продуктами\nconst products = [\n    { id: 'prod1', name: 'Название1' },\n    { id: 'prod2', name: 'Название2' },\n    { id: 'prod3', name: 'Название3' },\n    { id: 'prod4', name: 'Название4' },\n    { id: 'prod5', name: 'Название5' },\n    { id: 'prod6', name: 'Название6' },\n    { id: 'prod7', name: 'Название7' },\n    { id: 'prod8', name: 'Название8' },\n    { id: 'prod9', name: 'Название9' },\n    { id: 'prod10', name: 'Название10' },\n    { id: 'prod11', name: 'Название11' },\n    { id: 'prod12', name: 'Название12' },\n    { id: 'prod13', name: 'Название13' },\n    { id: 'prod14', name: 'Название14' },\n    { id: 'prod15', name: 'Название15' },\n    { id: 'prod16', name: 'Название16' },\n    { id: 'prod17', name: 'Название17' },\n    { id: 'prod18', name: 'Название18' },\n    { id: 'prod19', name: 'Название19' },\n    { id: 'prod20', name: 'Название20' },\n    { id: 'prod21', name: 'Название21' },\n    { id: 'prod22', name: 'Название22' },\n    { id: 'prod23', name: 'Название23' },\n    { id: 'prod24', name: 'Название24' },\n    { id: 'prod25', name: 'Название25' },\n    { id: 'prod26', name: 'Название26' },\n    { id: 'prod27', name: 'Название27' },\n    { id: 'prod28', name: 'Название28' },\n    { id: 'prod29', name: 'Название29' },\n    { id: 'prod30', name: 'Название30' },\n];\nwindow.addEventListener('DOMContentLoaded', () => {\n    // Обновляем статус пользователя.\n    //  Вызываем при загрузке, либо после смены статуса (залогинен/не залогинен)\n    updateUserStatus();\n});\n\n/****************************** Функции *********************************/\n/** Функция обновления статуса пользователя */\nconst updateUserStatus = () => {\n    const bodyElement = document.querySelector('body');\n    if (userData.logged) {\n        bodyElement.classList.add('_userlogged');\n        (0,_composite_modules_header_header_js__WEBPACK_IMPORTED_MODULE_0__.changeUserNameInHeader)(userData.name); // смена имени пользователя\n    }\n    else {\n        bodyElement.classList.remove('_userlogged');\n        (0,_composite_modules_header_header_js__WEBPACK_IMPORTED_MODULE_0__.changeUserNameInHeader)(''); // смена имени пользователя\n    }\n    ;\n};\n\n\n//# sourceURL=webpack://hotel-toxin/./src/common/common.ts?");

/***/ }),

/***/ "./src/composite_modules/booking/booking.ts":
/*!**************************************************!*\
  !*** ./src/composite_modules/booking/booking.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bookingChangeHandlersInitialization: () => (/* binding */ bookingChangeHandlersInitialization),\n/* harmony export */   bookingUpdateCard: () => (/* binding */ bookingUpdateCard)\n/* harmony export */ });\n/* harmony import */ var _pages_main_main_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../pages/main/main.js */ \"./src/pages/main/main.ts\");\n\n// Функция разделения числа по разрядам\nfunction divideNumDigits(num) {\n    return String(num).replace(/(\\d)(?=(\\d\\d\\d)+([^\\d]|$))/g, '$1 ');\n}\n//  Преобразование строки \"dd.MM.yyyy\" в дату\nfunction convertToDate(dateString) {\n    let d = dateString.split(\".\");\n    let dat = new Date(d[2] + '/' + d[1] + '/' + d[0]);\n    return dat;\n}\n// Функция рассчета количества дней\nfunction daysBetween(startDate, endDate) {\n    if (!(startDate instanceof Date) || !(endDate instanceof Date)) {\n        throw new Error('Применяйте корректные объекты Date.');\n    }\n    const diffTime = Math.abs(Date.UTC(endDate.getFullYear(), endDate.getMonth(), endDate.getDate()) -\n        Date.UTC(startDate.getFullYear(), startDate.getMonth(), startDate.getDate()));\n    const diffDays = Math.round(diffTime / (1000 * 60 * 60 * 24));\n    return diffDays;\n}\n// ********************************************************************************************\n// *******************************  Основная часть  *******************************************\n// ********************************************************************************************\n// interface IBookingParams {\n//     number: string;\n//     type: string;\n//     price: number;\n//     discountChild: number;\n//     discountBaby: number;\n//     serviceFee: number;\n//     serviceFeeDiscount: number;\n//     additionalServiceFee: number;\n//     days: number;\n// };\n// ********************************************************************************************\n// Обновление данных карточки заказа\nconst bookingUpdateCard = () => {\n    const bookingWrapper = document.querySelector('.booking');\n    const bookingElementRoomNumber = bookingWrapper.querySelector('.booking__number');\n    const bookingElementType = bookingWrapper.querySelector('.booking__type');\n    const bookingElementPrice = bookingWrapper.querySelector('.booking__price');\n    const bookingElementPeriod = bookingWrapper.querySelector('.booking__period');\n    const bookingElementPeriodPrice = bookingWrapper.querySelector('.booking__period-price');\n    const bookingElementFeeInfo = bookingWrapper.querySelector('.booking__fee-info');\n    const bookingElementFeePrice = bookingWrapper.querySelector('.booking__fee-price');\n    const bookingElementAddfeeInfo = bookingWrapper.querySelector('.booking__addfee-info');\n    const bookingElementAddfeePrice = bookingWrapper.querySelector('.booking__addfee-price');\n    const bookingElementDiscountPrice = bookingWrapper.querySelector('.booking__discount-price');\n    const bookingElementTotalPrice = bookingWrapper.querySelector('.booking__total-price');\n    const bookingElementButton = bookingWrapper.querySelector('.button-arrow');\n    const rangeInputs = bookingWrapper.querySelectorAll('.booking__dropdown-date-split input');\n    const inputRangeFrom = rangeInputs[0];\n    const inputRangeTo = rangeInputs[1];\n    const guestsInputs = bookingWrapper.querySelectorAll('.booking__guests input');\n    const inputAdult = guestsInputs[0];\n    const inputChildren = guestsInputs[1];\n    const inputBabies = guestsInputs[2];\n    // Объект для более удобного доступа к элементам\n    const elem = {\n        wrapper: bookingWrapper,\n        roomNumber: bookingElementRoomNumber,\n        type: bookingElementType,\n        price: bookingElementPrice,\n        period: bookingElementPeriod,\n        periodPrice: bookingElementPeriodPrice,\n        feeInfo: bookingElementFeeInfo,\n        feePrice: bookingElementFeePrice,\n        addFeeInfo: bookingElementAddfeeInfo,\n        addFeePrice: bookingElementAddfeePrice,\n        discountPrice: bookingElementDiscountPrice,\n        totalPrice: bookingElementTotalPrice,\n        inputRangeFrom,\n        inputRangeTo,\n        inputAdult,\n        inputChildren,\n        inputBabies,\n        button: bookingElementButton,\n    };\n    // Перебираем все свойства у elem. Если хотя-бы одно не определено - прерываем выполнение\n    for (let key in elem) {\n        if (!key)\n            return;\n    }\n    ;\n    // выводим данные в карточку заказа\n    elem.roomNumber.innerText = _pages_main_main_js__WEBPACK_IMPORTED_MODULE_0__.bookingParams.roomNumber;\n    elem.type.innerText = _pages_main_main_js__WEBPACK_IMPORTED_MODULE_0__.bookingParams.type;\n    elem.price.innerText = divideNumDigits(_pages_main_main_js__WEBPACK_IMPORTED_MODULE_0__.bookingParams.price) + '₽';\n    // меняем вывод в зависимости от выбранного количества дней\n    if (_pages_main_main_js__WEBPACK_IMPORTED_MODULE_0__.bookingParams.days > 0) {\n        elem.period.innerText = divideNumDigits(_pages_main_main_js__WEBPACK_IMPORTED_MODULE_0__.bookingParams.price) + '₽ x ' + String(_pages_main_main_js__WEBPACK_IMPORTED_MODULE_0__.bookingParams.days);\n        if (_pages_main_main_js__WEBPACK_IMPORTED_MODULE_0__.bookingParams.days === 1) {\n            elem.period.innerText = elem.period.innerText + ' сутки';\n        }\n        else {\n            elem.period.innerText = elem.period.innerText + ' суток';\n        }\n        ;\n        elem.periodPrice.innerText = divideNumDigits(_pages_main_main_js__WEBPACK_IMPORTED_MODULE_0__.bookingParams.price * _pages_main_main_js__WEBPACK_IMPORTED_MODULE_0__.bookingParams.days) + '₽';\n        elem.feePrice.innerText = divideNumDigits(_pages_main_main_js__WEBPACK_IMPORTED_MODULE_0__.bookingParams.serviceFee) + '₽';\n        elem.addFeePrice.innerText = divideNumDigits(_pages_main_main_js__WEBPACK_IMPORTED_MODULE_0__.bookingParams.additionalServiceFee) + '₽';\n        elem.discountPrice.innerText = divideNumDigits(-_pages_main_main_js__WEBPACK_IMPORTED_MODULE_0__.bookingParams.Discount) + '₽';\n        elem.totalPrice.innerText = divideNumDigits(_pages_main_main_js__WEBPACK_IMPORTED_MODULE_0__.bookingParams.price * _pages_main_main_js__WEBPACK_IMPORTED_MODULE_0__.bookingParams.days + _pages_main_main_js__WEBPACK_IMPORTED_MODULE_0__.bookingParams.serviceFee\n            + _pages_main_main_js__WEBPACK_IMPORTED_MODULE_0__.bookingParams.additionalServiceFee - _pages_main_main_js__WEBPACK_IMPORTED_MODULE_0__.bookingParams.Discount) + '₽';\n    }\n    else {\n        elem.period.innerText = 'Стоимость';\n        elem.periodPrice.innerText = '0₽';\n        elem.feePrice.innerText = '0₽';\n        elem.addFeePrice.innerText = '0₽';\n        elem.discountPrice.innerText = '0₽';\n        elem.totalPrice.innerText = '0₽';\n    }\n    ;\n    // управление активностью кнопки\n    if ((Number(elem.inputAdult.value) > 0) && (_pages_main_main_js__WEBPACK_IMPORTED_MODULE_0__.bookingParams.days > 0)) {\n        //Кнопка активна\n        elem.button.classList.remove('button-arrow__inactive');\n    }\n    else {\n        // Кнопка неактивна\n        elem.button.classList.add('button-arrow__inactive');\n    }\n    ;\n};\n// ********************************************************************************************\n// Инициалмзация обработчика изменений в диапазоне дат\nconst bookingChangeHandlersInitialization = () => {\n    const bookingWrapper = document.querySelector('.booking');\n    if (!bookingWrapper) {\n        return;\n    }\n    ;\n    const rangeInputs = bookingWrapper.querySelectorAll('.booking__dropdown-date-split input');\n    const inputRangeFrom = rangeInputs[0];\n    const inputRangeTo = rangeInputs[1];\n    const inputAdult = bookingWrapper.querySelector('.booking__guests input');\n    if ((!inputRangeFrom) || (!inputRangeTo) || (!inputAdult)) {\n        return;\n    }\n    ;\n    // Обработчик события input на inputRangeTo\n    inputRangeTo.addEventListener('input', () => {\n        const dateFrom = convertToDate(inputRangeFrom.value);\n        const dateTo = convertToDate(inputRangeTo.value);\n        if ((dateFrom) && (dateTo)) {\n            //const days = Math.round((dateTo - dateFrom) / (1000 * 60 * 60 * 24));\n            const days = daysBetween(dateFrom, dateTo);\n            console.log('days:', dateTo);\n            if (days) {\n                _pages_main_main_js__WEBPACK_IMPORTED_MODULE_0__.bookingParams.days = days;\n            }\n            else {\n                _pages_main_main_js__WEBPACK_IMPORTED_MODULE_0__.bookingParams.days = 0;\n            }\n            bookingUpdateCard();\n        }\n        ;\n    });\n    // Обработчик события input на inputAdult\n    inputAdult.addEventListener('input', () => {\n        bookingUpdateCard();\n    });\n};\n\n\n\n//# sourceURL=webpack://hotel-toxin/./src/composite_modules/booking/booking.ts?");

/***/ }),

/***/ "./src/composite_modules/header/header.ts":
/*!************************************************!*\
  !*** ./src/composite_modules/header/header.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   changeUserNameInHeader: () => (/* binding */ changeUserNameInHeader)\n/* harmony export */ });\nconst changeUserNameInHeader = (userName) => {\n    const userNameElement = document.querySelector('.header__username');\n    if (userNameElement) {\n        userNameElement.innerText = userName;\n    }\n    ;\n};\n\n\n\n//# sourceURL=webpack://hotel-toxin/./src/composite_modules/header/header.ts?");

/***/ }),

/***/ "./src/modules/button-like/button-like.ts":
/*!************************************************!*\
  !*** ./src/modules/button-like/button-like.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buttonLikeActivate: () => (/* binding */ buttonLikeActivate)\n/* harmony export */ });\n// *****************************************************************************\n// *****************************************************************************\nconst buttonLikeActivate = () => {\n    /** Выборка всех.button - like и обработка каждого */\n    document.querySelectorAll('.button-like').forEach(function (buttonLike) {\n        buttonLike.addEventListener('click', function () {\n            let value = Number(buttonLike.dataset.value);\n            if (buttonLike.classList.contains('button-like_active')) {\n                // Если была активна\n                value = value - 1;\n            }\n            else {\n                // Если была неактивна    \n                value = value + 1;\n            }\n            ;\n            // Изменяем значение data-value\n            buttonLike.dataset.value = String(value);\n            // Изменяем отображаемый текст\n            buttonLike.querySelector('.button-like__text').innerHTML = String(value);\n            // Переключаем класс button-like_active\n            buttonLike.classList.toggle('button-like_active');\n        });\n    });\n};\n\n\n\n//# sourceURL=webpack://hotel-toxin/./src/modules/button-like/button-like.ts?");

/***/ }),

/***/ "./src/modules/checkbox-list-exp/checkbox-list-exp.ts":
/*!************************************************************!*\
  !*** ./src/modules/checkbox-list-exp/checkbox-list-exp.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkboxListExpActivate: () => (/* binding */ checkboxListExpActivate)\n/* harmony export */ });\n// *********************************************************************************\n//                              Основная часть\n// *********************************************************************************\nconst checkboxListExpActivate = () => {\n    /** Выборка всех .checkbox-list и обработка каждого */\n    document.querySelectorAll('.checkbox-list-exp').forEach(function (checkboxListWrapper) {\n        // селекторы\n        const checkboxListButton = checkboxListWrapper.querySelector('.checkbox-list-exp__button');\n        const checkboxListItems = checkboxListWrapper.querySelector('.checkbox-list-exp__items');\n        // классы элементов\n        const classButtonListOpened = 'checkbox-list-exp__button_listopened';\n        const classButtonActive = 'checkbox-list-exp__button_active';\n        const classListVisible = 'checkbox-list-exp__items_visible';\n        // Вызов функции назначения обработчиков для открытия и закрытия списка\n        openAndCloseActions({\n            buttonElement: checkboxListButton,\n            listElement: checkboxListItems,\n            buttonListOpnenedClass: classButtonListOpened,\n            buttonActiveClass: classButtonActive,\n            listVisibleClass: classListVisible\n        });\n    });\n};\nconst openAndCloseActions = function (params) {\n    const { buttonElement, listElement, buttonListOpnenedClass, buttonActiveClass, listVisibleClass } = params;\n    // Событие Click на кнопке (отображаем список, управляем стрелкой, управляем визуальными эффектами кнопки)\n    buttonElement.addEventListener('click', function () {\n        //отображаем список\n        listElement.classList.toggle(listVisibleClass);\n        //добавляем/убираем кнопке атрибут, по которому меняется стрелка\n        buttonElement.classList.toggle(buttonListOpnenedClass);\n        //добавляем визуальный эффект, аналогичный фокусу на кнопке\n        buttonElement.classList.add(buttonActiveClass);\n    });\n};\n// *********************************************************************************\n\n\n\n//# sourceURL=webpack://hotel-toxin/./src/modules/checkbox-list-exp/checkbox-list-exp.ts?");

/***/ }),

/***/ "./src/modules/dropdown/dropdown.ts":
/*!******************************************!*\
  !*** ./src/modules/dropdown/dropdown.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dropdownActivate: () => (/* binding */ dropdownActivate)\n/* harmony export */ });\nconst dropdownOpenAndCloseActions = function (params) {\n    const { buttonElement, listElement, buttonListOpnenedClass, buttonActiveClass, listVisibleClass } = params;\n    // Событие Click на кнопке (отображаем список, управляем стрелкой, управляем визуальными эффектами кнопки)\n    buttonElement.addEventListener('click', function () {\n        //отображаем список\n        listElement.classList.toggle(listVisibleClass);\n        //добавляем/убираем кнопке атрибут, по которому меняется стрелка\n        buttonElement.classList.toggle(buttonListOpnenedClass);\n        //добавляем визуальный эффект, аналогичный фокусу на кнопке\n        buttonElement.classList.add(buttonActiveClass);\n    });\n    //скрываем по клику снаружи кнопки\n    document.addEventListener('click', function (e) {\n        if (e.target !== buttonElement) {\n            //снимаем визуальное отображение фокуса\n            buttonElement.classList.remove(buttonActiveClass);\n            //скрываем список\n            listElement.classList.remove(listVisibleClass);\n            //убираем кнопке атрибут, по которому менняется стрелка\n            buttonElement.classList.remove(buttonListOpnenedClass);\n        }\n    });\n    //скрываем нажатию на Tab или Escape\n    document.addEventListener('keydown', function (e) {\n        if (e.key === 'Tab' || e.key === 'Escape') {\n            //снимаем визуальное отображение фокуса\n            buttonElement.classList.remove(buttonActiveClass);\n            //скрываем список\n            listElement.classList.remove(listVisibleClass);\n            //убираем кнопке атрибут, по которому менняется стрелка\n            buttonElement.classList.remove(buttonListOpnenedClass);\n        }\n    });\n};\n// Функция установки окончания существительного в зависимости от числительного\nfunction numWord(value, words) {\n    value = Math.abs(value) % 100;\n    const num = value % 10;\n    if (value > 10 && value < 20)\n        return words[2];\n    if (num > 1 && num < 5)\n        return words[1];\n    if (num == 1)\n        return words[0];\n    return words[2];\n}\n/**\n * Активирование dropdown\n */\nconst dropdownActivate = () => {\n    // Выборка всех .dropdown и обработка каждого\n    document.querySelectorAll('.dropdown').forEach(function (dropdownWrapper) {\n        const classDropdownInput = 'dropdown__input';\n        const classButtonInc = 'dropdown__button-inc';\n        const classButtonDec = 'dropdown__button-dec';\n        const classValue = 'dropdown__value';\n        const classButtonDecInactive = 'dropdown__button-dec_inactive';\n        const classButtonActive = 'dropdown__button_active';\n        const classButtonListOpnened = 'dropdown__button_listopened';\n        const classListVisible = 'dropdown__list_visible';\n        const classApplyButton = 'dropdown__button-apply';\n        const classClearButton = 'dropdown__button-clear';\n        const classClearButtonInactive = 'dropdown__button-clear_inactive';\n        const classButtonsContainerInactive = 'dropdown__buttons-container_inactive';\n        const dropdownInputs = dropdownWrapper.querySelectorAll('.dropdown__input');\n        const dropdownButton = dropdownWrapper.querySelector('.dropdown__button');\n        const dropdownList = dropdownWrapper.querySelector('.dropdown__list');\n        const dropdownInput1 = (dropdownWrapper.querySelector(\".\" + 'dropdown__input' + \"[data-id='1']\"));\n        const dropdownInput2 = dropdownWrapper.querySelector(\".\" + 'dropdown__input' + \"[data-id='2']\");\n        const dropdownInput3 = dropdownWrapper.querySelector(\".\" + 'dropdown__input' + \"[data-id='3']\");\n        const dropdownItem1 = dropdownWrapper.querySelector(\".\" + 'dropdown__item' + \"[data-id='1']\");\n        const dropdownItem2 = dropdownWrapper.querySelector(\".\" + 'dropdown__item' + \"[data-id='2']\");\n        const dropdownItem3 = dropdownWrapper.querySelector(\".\" + 'dropdown__item' + \"[data-id='3']\");\n        const dropdownClearButton = dropdownWrapper.querySelector(\".\" + classClearButton);\n        const dropdownButtonsContainer = dropdownWrapper.querySelector('.dropdown__buttons-container');\n        //dropdownItem1.querySelector('.' + classValue).innerHTML = String(val1);\n        //dropdownItem2.querySelector('.' + classValue).innerHTML = String(val2);\n        //dropdownItem3.querySelector('.' + classValue).innerHTML = String(val3);\n        // Проверяем успешность селекторов\n        if (!(dropdownItem1\n            && dropdownItem2\n            && dropdownItem3\n            && dropdownList\n            && dropdownInput1\n            && dropdownInput2\n            && dropdownInput3\n            && dropdownButton\n            && dropdownClearButton\n            && dropdownButtonsContainer))\n            return; // Если undefined - прервать выполнение функции\n        const dropdownValue1 = dropdownItem1.querySelector('.' + classValue);\n        const dropdownValue2 = dropdownItem2.querySelector('.' + classValue);\n        const dropdownValue3 = dropdownItem3.querySelector('.' + classValue);\n        const buttonDec1 = dropdownItem1.querySelector('.' + classButtonDec);\n        const buttonDec2 = dropdownItem2.querySelector('.' + classButtonDec);\n        const buttonDec3 = dropdownItem3.querySelector('.' + classButtonDec);\n        // Проверяем успешность селекторов\n        if (!(dropdownValue1\n            && dropdownValue2\n            && dropdownValue3\n            && buttonDec1\n            && buttonDec2\n            && buttonDec3))\n            return; // Если undefined - прервать выполнение функции\n        // Проверяем наличие свойств\n        if (!((\"value\" in dropdownInput1)\n            && (\"value\" in dropdownInput2)\n            && (\"value\" in dropdownInput3)))\n            return; // Если undefined - прервать выполнение функции\n        // Запоминаем заголовок по умолчанию\n        const placeholder = dropdownButton.innerHTML;\n        console.log(buttonDec1, buttonDec2, buttonDec3);\n        // Вызов функции назначения обработчиков для открытия и закрытия списка\n        dropdownOpenAndCloseActions({\n            buttonElement: dropdownButton,\n            listElement: dropdownList,\n            buttonListOpnenedClass: classButtonListOpnened,\n            buttonActiveClass: classButtonActive,\n            listVisibleClass: classListVisible\n        });\n        // buttonElement: HTMLElement,\n        // listElement: HTMLElement,\n        // buttonListOpnenedClass: string,\n        // buttonActiveClass: string,\n        // listVisibleClass: string\n        // Обработка нажатий на списке\n        dropdownList.addEventListener('click', function (e) {\n            let target = (e.target); // где был клик? (!!!!!)\n            let addedAdult = false;\n            if (!target)\n                return; // Если undefined - прервать выполнение функции\n            //Если click сработало на classButtonInc или classButtonDec\n            if ((target.classList.contains(classButtonInc)) || (target.classList.contains(classButtonDec))) {\n                // Определяем родитея, потомком которого является нажатая кнопка, получаем data-id\n                const currItem = (target.parentNode);\n                if (!currItem || !currItem.dataset)\n                    return;\n                const currItemDataId = currItem.dataset.id;\n                // Находим Inpit с таким же data-id\n                const currInput = dropdownWrapper.querySelector(\".\" + classDropdownInput + \"[data-id='\" + currItemDataId + \"']\");\n                if (!currInput)\n                    return;\n                // Запоминаем старое значение\n                if (!(\"value\" in currInput))\n                    return;\n                const oldValue = Number(currInput.value);\n                // определяем тип операции\n                let increment = 0;\n                if (target.classList.contains(classButtonInc)) {\n                    increment = 1;\n                }\n                else {\n                    increment = -1;\n                }\n                // определяем новое значение\n                const newValue = oldValue + increment;\n                // Изменяем значение, если новое значение >= 0\n                if (newValue >= 0) {\n                    // Изменяем значение, записанное в Input.value\n                    currInput.value = newValue;\n                    //Если тип дропдауна = 1 и количество взрослых <= 1, а количество детей и младенцев больше 0\n                    // то устанавливаем количество взрослых на 1\n                    let dropdownType = 1; //Тип по умолчанию\n                    if (dropdownWrapper.dataset) { //Если у dropdownWrapper есть аттрибут dataset\n                        if (dropdownWrapper.dataset.type === '2') {\n                            dropdownType = 2;\n                        }\n                    }\n                    if ((dropdownType === 1) && (Number(dropdownInput1.value) <= 1)) {\n                        // Если есть дети / младенцы\n                        if ((Number(dropdownInput2.value) + Number(dropdownInput3.value)) > 0) {\n                            //добавляем 1 взрослого\n                            dropdownInput1.value = '1';\n                            addedAdult = true;\n                        }\n                    }\n                    // ********* Отображение значений dropdownInput ***************\n                    const val1 = Number(dropdownInput1.value);\n                    const val2 = Number(dropdownInput2.value);\n                    const val3 = Number(dropdownInput3.value);\n                    dropdownValue1.innerHTML = String(val1);\n                    dropdownValue2.innerHTML = String(val2);\n                    dropdownValue3.innerHTML = String(val3);\n                    // ********** Управление активностью кнопок \"-\" ***************\n                    // Кнопка 1\n                    if ((val1 === 0) || ((dropdownType === 1) && ((val1 === 1) && ((val2 + val3) > 0)))) {\n                        buttonDec1.classList.add(classButtonDecInactive);\n                    }\n                    else {\n                        buttonDec1.classList.remove(classButtonDecInactive);\n                    }\n                    ;\n                    // Кнопка 2\n                    if (val2 === 0) {\n                        buttonDec2.classList.add(classButtonDecInactive);\n                    }\n                    else {\n                        buttonDec2.classList.remove(classButtonDecInactive);\n                    }\n                    ;\n                    // Кнопка 3\n                    if (val3 === 0) {\n                        buttonDec3.classList.add(classButtonDecInactive);\n                    }\n                    else {\n                        buttonDec3.classList.remove(classButtonDecInactive);\n                    }\n                    ;\n                    // Кнопка \"Очистить\"\n                    if ((val1 === 0) && (val2 === 0) && (val3 === 0)) {\n                        dropdownClearButton.classList.add(classClearButtonInactive);\n                    }\n                    else {\n                        dropdownClearButton.classList.remove(classClearButtonInactive);\n                    }\n                    ;\n                    console.log(val1, val2, val3);\n                    // **************** Вызываем собитие input ****************\n                    const event = new Event('input');\n                    currInput.dispatchEvent(event);\n                    if (addedAdult) {\n                        dropdownInput1.dispatchEvent(event);\n                    }\n                    ;\n                    // ************* Формируем заголовок на кнопке *************\n                    const sum = val1 + val2 + val3;\n                    if (dropdownType === 1) {\n                        if (sum === 0) {\n                            dropdownButton.innerHTML = placeholder;\n                        }\n                        else {\n                            dropdownButton.innerHTML = String(sum) + ' ' + numWord(sum, [\"гость\", \"гостя\", \"гостей\"]);\n                        }\n                    }\n                    else {\n                        if (sum === 0) {\n                            dropdownButton.innerHTML = placeholder;\n                        }\n                        else {\n                            let caption = '';\n                            if (val1 > 0) {\n                                if (caption !== '') {\n                                    caption = caption + ', ';\n                                }\n                                ;\n                                caption = caption + String(val1) + ' ' + numWord(val1, [\"спальня\", \"спальни\", \"спален\"]);\n                            }\n                            if (val2 > 0) {\n                                if (caption !== '') {\n                                    caption = caption + ', ';\n                                }\n                                ;\n                                caption = caption + String(val2) + ' ' + numWord(val2, [\"кровать\", \"кровати\", \"кроватей\"]);\n                            }\n                            if (val3 > 0) {\n                                if (caption !== '') {\n                                    caption = caption + ', ';\n                                }\n                                ;\n                                caption = caption + String(val3) + ' ' + numWord(val3, [\"ванная комната\", \"ванные комнаты\", \"ванных комнат\"]);\n                            }\n                            dropdownButton.innerHTML = caption;\n                        }\n                    }\n                }\n            }\n            //Если click сработало на кнопке \"Применить\"\n            if (target.classList.contains(classApplyButton)) {\n                //снимаем визуальное отображение фокуса\n                dropdownButton.classList.remove(classButtonActive);\n                //скрываем список\n                dropdownList.classList.remove(classListVisible);\n                //убираем кнопке атрибут, по которому менняется стрелка\n                dropdownButton.classList.remove(classButtonListOpnened);\n            }\n            //Если click сработало на кнопке \"Очистить\"\n            if (target.classList.contains(classClearButton)) {\n                dropdownInput1.value = '0';\n                dropdownInput2.value = '0';\n                dropdownInput3.value = '0';\n                dropdownValue1.innerHTML = '0';\n                dropdownValue2.innerHTML = '0';\n                dropdownValue3.innerHTML = '0';\n                buttonDec1.classList.add(classButtonDecInactive);\n                buttonDec2.classList.add(classButtonDecInactive);\n                buttonDec3.classList.add(classButtonDecInactive);\n                dropdownClearButton.classList.add(classClearButtonInactive);\n                dropdownButton.innerHTML = 'Выберите гостей';\n            }\n            //останавливаем всплытие\n            e.stopPropagation();\n            //оставляем фокус на кнопке\n            dropdownButton.focus();\n        });\n    });\n};\n\n\n\n//# sourceURL=webpack://hotel-toxin/./src/modules/dropdown/dropdown.ts?");

/***/ }),

/***/ "./src/modules/pagination/pagination.ts":
/*!**********************************************!*\
  !*** ./src/modules/pagination/pagination.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   paginate: () => (/* binding */ paginate)\n/* harmony export */ });\n;\nconst renderProducts = ({ products, container, textContainer, numberProductsOnPage, page }) => {\n    container.innerHTML = '';\n    const firstProductIndex = numberProductsOnPage * page - numberProductsOnPage;\n    let lastProductIndex;\n    if ((firstProductIndex + numberProductsOnPage) < products.length) {\n        lastProductIndex = firstProductIndex + numberProductsOnPage;\n    }\n    else {\n        lastProductIndex = products.length;\n    }\n    ;\n    /** вырезаем нужную часть массива */\n    const productsOnPage = products.slice(firstProductIndex, lastProductIndex);\n    console.log('productsOnPage: ', productsOnPage);\n    productsOnPage.forEach(({ id, name }) => {\n        const li = document.createElement('li');\n        li.classList.add('products-list__item');\n        li.innerHTML = `\r\n                <div class='products-list__id'>\r\n                    ${id}\r\n                </div>\r\n                <div class='products-list__name'>\r\n                    ${name}\r\n                </div >\r\n                `;\n        container.append(li);\n        console.log('Product li: ', li);\n    });\n    /** Обновляем текстовую часть  */\n    textContainer.innerText = renderText({\n        firstNumber: firstProductIndex + 1,\n        lastNumber: lastProductIndex,\n        totalQuantity: products.length\n    });\n};\n;\nconst renderText = ({ firstNumber, lastNumber, totalQuantity }) => {\n    let resultString = String(firstNumber) + ' – ' + String(lastNumber) + ' из ';\n    if (totalQuantity <= 100) {\n        resultString = resultString + String(totalQuantity);\n    }\n    else {\n        resultString = resultString + String(Math.floor(totalQuantity / 100) * 100) + '+';\n    }\n    ;\n    if (((totalQuantity === 1) || (totalQuantity % 10 === 1)) && (totalQuantity < 100)) {\n        resultString = resultString + ' варианта аренды';\n    }\n    else {\n        resultString = resultString + ' вариантов аренды';\n    }\n    ;\n    return resultString;\n};\n;\nconst renderPagination = ({ totalProducts, numberProductsOnPage, currPage }) => {\n    /** Рассчитываем общее количество страниц */\n    const pagesCount = Math.ceil(totalProducts / numberProductsOnPage);\n    /** Ищем элемент (ul), содержащий в себе элементы - кнопки (li) */\n    const ul = document.querySelector('.pagination__list');\n    /** Обнуляем внутреннее содержимое ul */\n    ul.innerHTML = '';\n    if (pagesCount <= 5) {\n        /** Обычный рендер без троеточия */\n        for (let i = 1; i <= pagesCount; i++) {\n            const li = renderBtn({ page: i, currPage: currPage });\n            ul.append(li);\n        }\n    }\n    else {\n        /** Рендер с троеточием. Будет в 3 этапа: до текущей страницы, текущая и после текущей */\n        // *** рендер до текущей ***\n        renderBtnGroup({\n            ul: ul,\n            firtPage: 1,\n            lastPage: currPage - 1,\n            currPage: currPage\n        });\n        // *** рендер текущей ***\n        renderBtnGroup({\n            ul: ul,\n            firtPage: currPage,\n            lastPage: currPage,\n            currPage: currPage\n        });\n        // *** рендер после текущей ***\n        renderBtnGroup({\n            ul: ul,\n            firtPage: currPage + 1,\n            lastPage: pagesCount,\n            currPage: currPage\n        });\n    }\n    /** Обработка стиля активной/неактивной стрелки */\n    const arrowElement = document.querySelector('.pagination__arrow');\n    if (currPage < pagesCount) {\n        arrowElement.classList.remove('pagination__arrow_unactive');\n    }\n    else {\n        arrowElement.classList.add('pagination__arrow_unactive');\n    }\n    ;\n};\n;\nconst renderBtnGroup = ({ ul, firtPage, lastPage, currPage }) => {\n    if ((lastPage - firtPage) < 3) {\n        for (let i = firtPage; i <= lastPage; i++) {\n            const li = renderBtn({ page: i, currPage: currPage });\n            ul.append(li);\n        }\n    }\n    else {\n        // Рендер с троеточием\n        // Первая кнопка\n        ul.append(renderBtn({ page: firtPage, currPage: currPage }));\n        // троеточие\n        const li = document.createElement('li');\n        li.classList.add('pagination__item');\n        li.classList.add('pagination__item_unclickable');\n        li.textContent = '...';\n        ul.append(li);\n        // Последняя кнопка\n        ul.append(renderBtn({ page: lastPage, currPage: currPage }));\n    }\n    ;\n};\n;\nconst renderBtn = ({ page, currPage }) => {\n    const li = document.createElement('li');\n    li.classList.add('pagination__item');\n    li.textContent = String(page);\n    if (currPage === page) {\n        li.classList.add('pagination__item_active');\n    }\n    return li;\n};\n;\nconst eventListenerPaginationClicks = ({ paginationWrapper, products, currentPage, productContainer, paginationText, quantityProductsOnPage, totalPages }) => {\n    // На контейнер пагинации вешаем обработчик кликов\n    paginationWrapper.addEventListener('click', (event) => {\n        // получаем цель клика\n        const eventTarget = event.target;\n        // Проверяем нет ли у цели клика родителя с классом pagination__item\n        if (eventTarget.closest('.pagination__item')) {\n            // Если в содержимом нет трех точек\n            if (eventTarget.textContent !== '...') {\n                // меняем значение переменной currentPage на то, что содержится в тексте контейнера\n                currentPage = Number(eventTarget.textContent);\n                // запускаем рендер продуктов\n                renderProducts({\n                    products: products,\n                    container: productContainer,\n                    textContainer: paginationText,\n                    numberProductsOnPage: quantityProductsOnPage,\n                    page: currentPage\n                });\n                // запускаем рендер пагинации\n                renderPagination({\n                    totalProducts: products.length,\n                    numberProductsOnPage: quantityProductsOnPage,\n                    currPage: currentPage\n                });\n            }\n        }\n        else {\n            // Если кликнули на стрелку и еще не достигли максимумальной страницы\n            if ((eventTarget.closest('.pagination__arrow')) && (currentPage < totalPages)) {\n                // меняем значение переменной currentPage на то, что содержится в тексте контейнера\n                currentPage = currentPage + 1;\n                // запускаем рендер продуктов\n                renderProducts({\n                    products: products,\n                    container: productContainer,\n                    textContainer: paginationText,\n                    numberProductsOnPage: quantityProductsOnPage,\n                    page: currentPage\n                });\n                // запускаем рендер пагинации\n                renderPagination({\n                    totalProducts: products.length,\n                    numberProductsOnPage: quantityProductsOnPage,\n                    currPage: currentPage\n                });\n            }\n        }\n        ;\n    });\n};\n// ********************************************************************************************\n// *******************************  Основная часть  *******************************************\n// ********************************************************************************************\nconst paginate = (products) => {\n    let quantityProductsOnPage = 3;\n    let currentPage = 1;\n    const totalPages = Math.ceil(products.length / quantityProductsOnPage);\n    const productContainer = document.querySelector('.products-list__list');\n    const paginationWrapper = document.querySelector('.pagination');\n    const paginationText = document.querySelector('.pagination__text');\n    /** 1 - Рендерим продукты */\n    renderProducts({\n        products,\n        container: productContainer,\n        textContainer: paginationText,\n        numberProductsOnPage: quantityProductsOnPage,\n        page: currentPage\n    });\n    /** 2 - Рендерим пагинацию */\n    renderPagination({\n        totalProducts: products.length,\n        numberProductsOnPage: quantityProductsOnPage,\n        currPage: currentPage\n    });\n    /** 3 - вешаем обработчик кликов по контейнеру пагинации */\n    eventListenerPaginationClicks({\n        paginationWrapper,\n        products,\n        currentPage,\n        productContainer,\n        paginationText,\n        quantityProductsOnPage,\n        totalPages\n    });\n};\n\n\n\n//# sourceURL=webpack://hotel-toxin/./src/modules/pagination/pagination.ts?");

/***/ }),

/***/ "./src/pages/landing/landing.ts":
/*!**************************************!*\
  !*** ./src/pages/landing/landing.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bookingParams: () => (/* binding */ bookingParams)\n/* harmony export */ });\n/* harmony import */ var _modules_pagination_pagination_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../modules/pagination/pagination.js */ \"./src/modules/pagination/pagination.ts\");\n/* harmony import */ var _composite_modules_booking_booking_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../composite_modules/booking/booking.js */ \"./src/composite_modules/booking/booking.ts\");\n/* harmony import */ var _common_common_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/common.js */ \"./src/common/common.ts\");\n\n\n\n// Данные для карточки заказа\nlet bookingParams = {\n    roomNumber: '888',\n    type: 'Люкс',\n    price: 9990,\n    discountChild: 1,\n    discountBaby: 1,\n    serviceFee: 0,\n    Discount: 2179,\n    additionalServiceFee: 300,\n    days: 0,\n};\nwindow.addEventListener('DOMContentLoaded', () => {\n    (0,_modules_pagination_pagination_js__WEBPACK_IMPORTED_MODULE_0__.paginate)(_common_common_js__WEBPACK_IMPORTED_MODULE_2__.products);\n    (0,_composite_modules_booking_booking_js__WEBPACK_IMPORTED_MODULE_1__.bookingUpdateCard)();\n    (0,_composite_modules_booking_booking_js__WEBPACK_IMPORTED_MODULE_1__.bookingChangeHandlersInitialization)();\n});\n// экспорт переменной с данными о карточке заказа\n\n\n\n//# sourceURL=webpack://hotel-toxin/./src/pages/landing/landing.ts?");

/***/ }),

/***/ "./src/pages/main/main.ts":
/*!********************************!*\
  !*** ./src/pages/main/main.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bookingParams: () => (/* binding */ bookingParams)\n/* harmony export */ });\n/* harmony import */ var _common_common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/common.js */ \"./src/common/common.ts\");\n/* harmony import */ var _modules_pagination_pagination_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../modules/pagination/pagination.js */ \"./src/modules/pagination/pagination.ts\");\n/* harmony import */ var _composite_modules_booking_booking_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../composite_modules/booking/booking.js */ \"./src/composite_modules/booking/booking.ts\");\n/* harmony import */ var _modules_dropdown_dropdown_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../modules/dropdown/dropdown.js */ \"./src/modules/dropdown/dropdown.ts\");\n/* harmony import */ var _modules_button_like_button_like_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../modules/button-like/button-like.js */ \"./src/modules/button-like/button-like.ts\");\n/* harmony import */ var _modules_checkbox_list_exp_checkbox_list_exp_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../modules/checkbox-list-exp/checkbox-list-exp.js */ \"./src/modules/checkbox-list-exp/checkbox-list-exp.ts\");\n/** Импорт данных о товарах */\n\n\n\n/** Импорт функций для активации модулей */\n\n\n\n// Данные для карточки заказа\nlet bookingParams = {\n    roomNumber: '888',\n    type: 'Люкс',\n    price: 9990,\n    discountChild: 1,\n    discountBaby: 1,\n    serviceFee: 0,\n    Discount: 2179,\n    additionalServiceFee: 300,\n    days: 0,\n};\nwindow.addEventListener('DOMContentLoaded', () => {\n    /** Активирование функций модулей */\n    (0,_modules_dropdown_dropdown_js__WEBPACK_IMPORTED_MODULE_3__.dropdownActivate)();\n    (0,_modules_button_like_button_like_js__WEBPACK_IMPORTED_MODULE_4__.buttonLikeActivate)();\n    (0,_modules_checkbox_list_exp_checkbox_list_exp_js__WEBPACK_IMPORTED_MODULE_5__.checkboxListExpActivate)();\n    (0,_modules_pagination_pagination_js__WEBPACK_IMPORTED_MODULE_1__.paginate)(_common_common_js__WEBPACK_IMPORTED_MODULE_0__.products);\n    (0,_composite_modules_booking_booking_js__WEBPACK_IMPORTED_MODULE_2__.bookingUpdateCard)();\n    (0,_composite_modules_booking_booking_js__WEBPACK_IMPORTED_MODULE_2__.bookingChangeHandlersInitialization)();\n});\n// экспорт переменной с данными о карточке заказа\n\n\n\n//# sourceURL=webpack://hotel-toxin/./src/pages/main/main.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/pages/landing/landing.ts");
/******/ 	
/******/ })()
;